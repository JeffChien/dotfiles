# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[mgr]

keymap = [
    { on = "<Esc>", run = "escape",             desc = "Exit visual mode, clear selection, or cancel search" },
    { on = "q",     run = "quit",               desc = "Quit the process" },
    { on = "Q",     run = "quit --no-cwd-file", desc = "Quit without outputting cwd-file" },
    { on = "<C-c>", run = "close",              desc = "Close the current tab, or quit if it's last" },
    { on = "<C-z>", run = "suspend",            desc = "Suspend the process" },

    # Hopping
    { on = "k", run = "arrow prev", desc = "Previous file" },
    { on = "j", run = "arrow next", desc = "Next file" },

    { on = "<C-u>", run = "arrow -50%",  desc = "Move cursor up half page" },
    { on = "<C-d>", run = "arrow 50%",   desc = "Move cursor down half page" },

    { on = [ "g", "g" ], run = "arrow top", desc = "Go to top" },
    { on = "G",          run = "arrow bot", desc = "Go to bottom" },

    # Navigation
    { on = "h", run = "leave", desc = "Back to the parent directory" },
    { on = "l", run = "enter", desc = "Enter the child directory" },

    # Toggle
    { on = "<Space>", run = [ "toggle", "arrow next" ], desc = "Toggle the current selection state" },
    { on = ["v", "a"],   run = "toggle_all --state=on",    desc = "Select all files" },
    { on = ["v", "r"],   run = "toggle_all",               desc = "Invert selection" },
    { on = ["v", "<esc>"],   run = "escape --select",               desc = "clear all selection" },

    # Seeking
    { on = "<UP>", run = "seek -5", desc = "Seek up 5 units in the preview" },
    { on = "<DOWN>", run = "seek 5",  desc = "Seek down 5 units in the preview" },

    # Spotting
    { on = "<F1>", run = "spot", desc = "Spot hovered file" },

    # Operation
    { on = "<Enter>",   run = "open",                        desc = "Open selected files" },
    { on = "O", run = "open --interactive",          desc = "Open selected files interactively" },
    { on = ["y", "y"],         run = "yank",                        desc = "Yank selected files (copy)" },
    { on = ["y", "x"],         run = "yank --cut",                  desc = "Yank selected files (cut)" },
    { on = ["y", "<Esc>"],         run = "unyank",                      desc = "Cancel the yank status" },
    { on = ["p", "p"],         run = "paste",                       desc = "Paste yanked files" },
    { on = ["p", "P" ],         run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
    { on = ["p", "l"],         run = "link",                        desc = "Symlink the absolute path of yanked files" },
    { on = ["p", "L"],         run = "link --relative",             desc = "Symlink the relative path of yanked files" },
    { on = ["x", "x"],         run = "remove",                      desc = "Trash selected files" },
    { on = "a",         run = "create",                      desc = "Create a file (ends with / for directories)" },
    { on = "<F2>",         run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
    { on = ":",         run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
    { on = "<A-h>",         run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },

    # Copy
    { on = [ "c", "p" ], run = "copy path",             desc = "Copy the file path" },
    { on = [ "c", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
    { on = [ "c", "b" ], run = "copy filename",         desc = "Copy the filename" },
    { on = [ "c", "e" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

    # Filter
    { on = ["f", "f"], run = "filter --smart", desc = "Filter files" },
    { on = ["f", "s"],         run = "search --via=fd",             desc = "Search files by name via fd" },
    { on = ["f", "g"],         run = "search --via=rg",             desc = "Search files by content via ripgrep" },
    { on = ["f", "<Esc>"],     run = "escape --search",             desc = "Cancel the ongoing search" },
    { on = ["f", "z", "f"],         run = "plugin fzf",                  desc = "Jump to a file/directory via fzf" },
    { on = ["f", "z", "i"],         run = "plugin zoxide",               desc = "Jump to a directory via zoxide" },

    # Find
    { on = "/", run = "find --smart",            desc = "Find next file" },
    # { on = "?", run = "find --previous --smart", desc = "Find previous file" },
    { on = ";", run = "find_arrow",              desc = "Next found" },
    { on = ",", run = "find_arrow --previous",   desc = "Previous found" },

    # Sorting
    { on = [ ".", "m" ], run = [ "sort mtime --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
    { on = [ ".", "M" ], run = [ "sort mtime --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
    { on = [ ".", "b" ], run = [ "sort btime --reverse=no", "linemode btime" ], desc = "Sort by birth time" },
    { on = [ ".", "B" ], run = [ "sort btime --reverse", "linemode btime" ],    desc = "Sort by birth time (reverse)" },
    { on = [ ".", "e" ], run = "sort extension --reverse=no",                   desc = "Sort by extension" },
    { on = [ ".", "E" ], run = "sort extension --reverse",                      desc = "Sort by extension (reverse)" },
    { on = [ ".", "a" ], run = "sort alphabetical --reverse=no",                desc = "Sort alphabetically" },
    { on = [ ".", "A" ], run = "sort alphabetical --reverse",                   desc = "Sort alphabetically (reverse)" },
    { on = [ ".", "n" ], run = "sort natural --reverse=no",                     desc = "Sort naturally" },
    { on = [ ".", "N" ], run = "sort natural --reverse",                        desc = "Sort naturally (reverse)" },
    { on = [ ".", "s" ], run = [ "sort size --reverse=no", "linemode size" ],   desc = "Sort by size" },
    { on = [ ".", "S" ], run = [ "sort size --reverse", "linemode size" ],      desc = "Sort by size (reverse)" },
    { on = [ ".", "r" ], run = "sort random --reverse=no",                      desc = "Sort randomly" },

    # Goto
    { on = [ "g", "~" ],       run = "cd ~",             desc = "Go home" },
    { on = [ "g", "<Space>" ], run = "cd --interactive", desc = "Jump interactively" },
    { on = [ "g", "f" ],       run = "follow",           desc = "Follow hovered symlink" },

    # Tabs
    { on = "t", run = "tab_create --current", desc = "Create a new tab with CWD" },

    { on = "1", run = "tab_switch 0", desc = "Switch to first tab" },
    { on = "2", run = "tab_switch 1", desc = "Switch to second tab" },
    { on = "3", run = "tab_switch 2", desc = "Switch to third tab" },

    { on = "[", run = "tab_switch -1 --relative", desc = "Switch to previous tab" },
    { on = "]", run = "tab_switch 1 --relative",  desc = "Switch to next tab" },

    # Tasks
    { on = "w", run = "tasks:show", desc = "Show task manager" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[tasks]

keymap = [
    { on = "<Esc>", run = "close", desc = "Close task manager" },
    { on = "<C-c>", run = "close", desc = "Close task manager" },

    { on = "k", run = "arrow prev", desc = "Previous task" },
    { on = "j", run = "arrow next", desc = "Next task" },

    { on = "<Enter>", run = "inspect", desc = "Inspect the task" },
    { on = "x",       run = "cancel",  desc = "Cancel the task" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[spot]

keymap = [
    { on = "<Esc>", run = "close", desc = "Close the spot" },
    { on = "<C-c>", run = "close", desc = "Close the spot" },

    { on = "k", run = "arrow prev", desc = "Previous line" },
    { on = "j", run = "arrow next", desc = "Next line" },
    { on = "h", run = "swipe prev", desc = "Swipe to previous file" },
    { on = "l", run = "swipe next", desc = "Swipe to next file" },

    # Copy
    { on = [ "y", "y" ], run = "copy cell", desc = "Copy selected cell" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[pick]

keymap = [
    { on = "<Esc>",   run = "close",          desc = "Cancel pick" },
    { on = "<C-c>",   run = "close",          desc = "Cancel pick" },
    { on = "<Enter>", run = "close --submit", desc = "Submit the pick" },

    { on = "k", run = "arrow prev", desc = "Previous option" },
    { on = "j", run = "arrow next", desc = "Next option" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[input]

keymap = [
    { on = "<C-c>",   run = "close",          desc = "Cancel input" },
    { on = "<Enter>", run = "close --submit", desc = "Submit input" },
    { on = "<Esc>",   run = "escape",         desc = "Back to normal mode, or cancel input" },

    # Mode
    { on = "i", run = "insert",                          desc = "Enter insert mode" },
    { on = "I", run = [ "move first-char", "insert" ],   desc = "Move to the BOL, and enter insert mode" },
    { on = "a", run = "insert --append",                 desc = "Enter append mode" },
    { on = "A", run = [ "move eol", "insert --append" ], desc = "Move to the EOL, and enter append mode" },
    { on = "v", run = "visual",                          desc = "Enter visual mode" },
    { on = "r", run = "replace",                         desc = "Replace a single character" },

    # Selection
    { on = "V",     run = [ "move bol", "visual", "move eol" ], desc = "Select from BOL to EOL" },
    { on = "<C-A>", run = [ "move eol", "visual", "move bol" ], desc = "Select from EOL to BOL" },
    { on = "<C-E>", run = [ "move bol", "visual", "move eol" ], desc = "Select from BOL to EOL" },

    # Character-wise movement
    { on = "h",       run = "move -1", desc = "Move back a character" },
    { on = "l",       run = "move 1",  desc = "Move forward a character" },
    { on = "<Left>",  run = "move -1", desc = "Move back a character" },
    { on = "<Right>", run = "move 1",  desc = "Move forward a character" },
    { on = "<C-b>",   run = "move -1", desc = "Move back a character" },
    { on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

    # Word-wise movement
    { on = "b",     run = "backward",                    desc = "Move back to the start of the current or previous word" },
    { on = "B",     run = "backward --far",              desc = "Move back to the start of the current or previous WORD" },
    { on = "w",     run = "forward",                     desc = "Move forward to the start of the next word" },
    { on = "W",     run = "forward --far",               desc = "Move forward to the start of the next WORD" },
    { on = "e",     run = "forward --end-of-word",       desc = "Move forward to the end of the current or next word" },
    { on = "E",     run = "forward --far --end-of-word", desc = "Move forward to the end of the current or next WORD" },
    { on = "<A-b>", run = "backward",                    desc = "Move back to the start of the current or previous word" },
    { on = "<A-f>", run = "forward --end-of-word",       desc = "Move forward to the end of the current or next word" },

    # Line-wise movement
    { on = "0",      run = "move bol",        desc = "Move to the BOL" },
    { on = "$",      run = "move eol",        desc = "Move to the EOL" },
    { on = "_",      run = "move first-char", desc = "Move to the first non-whitespace character" },
    { on = "^",      run = "move first-char", desc = "Move to the first non-whitespace character" },
    { on = "<C-a>",  run = "move bol",        desc = "Move to the BOL" },
    { on = "<C-e>",  run = "move eol",        desc = "Move to the EOL" },
    { on = "<Home>", run = "move bol",        desc = "Move to the BOL" },
    { on = "<End>",  run = "move eol",        desc = "Move to the EOL" },

    # Delete
    { on = "<Backspace>", run = "backspace",         desc = "Delete the character before the cursor" },
    { on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
    { on = "<C-h>",       run = "backspace",         desc = "Delete the character before the cursor" },
    { on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

    # Kill
    { on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
    { on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
    { on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
    { on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

    # Cut/Yank/Paste
    { on = "d", run = "delete --cut",                                      desc = "Cut selected characters" },
    { on = "D", run = [ "delete --cut", "move eol" ],                      desc = "Cut until EOL" },
    { on = "c", run = "delete --cut --insert",                             desc = "Cut selected characters, and enter insert mode" },
    { on = "C", run = [ "delete --cut --insert", "move eol" ],             desc = "Cut until EOL, and enter insert mode" },
    { on = "s", run = [ "delete --cut --insert", "move 1" ],               desc = "Cut current character, and enter insert mode" },
    { on = "S", run = [ "move bol", "delete --cut --insert", "move eol" ], desc = "Cut from BOL until EOL, and enter insert mode" },
    { on = "x", run = [ "delete --cut", "move 1 --in-operating" ],         desc = "Cut current character" },
    { on = "y", run = "yank",                                              desc = "Copy selected characters" },
    { on = "p", run = "paste",                                             desc = "Paste copied characters after the cursor" },
    { on = "P", run = "paste --before",                                    desc = "Paste copied characters before the cursor" },

    # Undo/Redo
    { on = "u",     run = "undo", desc = "Undo the last operation" },
    { on = "<C-r>", run = "redo", desc = "Redo the last operation" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "?", run = "help", desc = "Open help" },
]

[confirm]

keymap = [
    { on = "<Esc>",   run = "close",          desc = "Cancel the confirm" },
    { on = "<C-c>",   run = "close",          desc = "Cancel the confirm" },
    { on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

    { on = "n", run = "close",          desc = "Cancel the confirm" },
    { on = "y", run = "close --submit", desc = "Submit the confirm" },

    { on = "k", run = "arrow prev", desc = "Previous line" },
    { on = "j", run = "arrow next", desc = "Next line" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[cmp]

keymap = [
    { on = "<C-c>",   run = "close",                                      desc = "Cancel completion" },
    { on = "<Tab>",   run = "close --submit",                             desc = "Submit the completion" },
    { on = "<Enter>", run = [ "close --submit", "input:close --submit" ], desc = "Complete and submit the input" },

    { on = "<Up>",   run = "arrow prev", desc = "Previous item" },
    { on = "<Down>", run = "arrow next", desc = "Next item" },

    { on = "<C-p>", run = "arrow prev", desc = "Previous item" },
    { on = "<C-n>", run = "arrow next", desc = "Next item" },

    # Help
    { on = "?", run = "help", desc = "Open help" },
]

[help]

keymap = [
    { on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
    { on = "<C-c>", run = "close",  desc = "Hide the help" },

    # Navigation
    { on = "k", run = "arrow prev", desc = "Previous line" },
    { on = "j", run = "arrow next", desc = "Next line" },

    { on = "<Up>",   run = "arrow prev", desc = "Previous line" },
    { on = "<Down>", run = "arrow next", desc = "Next line" },

    # Filtering
    { on = "f", run = "filter", desc = "Filter help items" },
]