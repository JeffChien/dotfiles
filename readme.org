#+title: Readme

* Table of Contents :TOC:
- [[#about][About]]
- [[#deploy][Deploy]]
  - [[#generate-platform-oriented-list][Generate platform oriented list]]
  - [[#recursively-generate-all-config][Recursively generate all config]]
  - [[#stow][Stow]]

* About
deploy by gnu stow base on the [[http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html][link]].

I've tried 3 different ways to manage dotfiles including this one, the current one is using Mackup, it's easy to use doesn't have a clean way to remove package. while I was trying the
other dotfile system that make home folder managed by git I came across the emacs org mode
babel dotfile system then I thought I should pick up this repo again.

migrating from the old system to the new one [1/3]
- [ ] remove legacy configs
- [-] using emacs org mode babel to maintain config files. [13/16]
  - [X] alacritty
  - [ ] awesome
  - [ ] bash
  - [X] zsh
  - [X] lf
  - [X] spacevim
  - [X] tmux
  - [ ] utils
  - [X] tig
  - [X] mpv
  - [X] yt-dlp
  - [X] fontconfig
  - [X] emacs
  - [X] yabai
  - [X] skhd
  - [X] spacebar
- [X] generating platform oriented lits for gnu stow

* Deploy
** Generate platform oriented list
*** MacOS (darwin)
#+begin_src shell
grep darwin **/TAGS -l | xargs dirname | sort >! darwin_list.txt
#+end_src
*** Linux (linux)
#+begin_src shell
grep linux **/TAGS -l | xargs dirname | sort >! linux_list.txt
#+end_src

** Recursively generate all config
#+begin_src shell
find . -type f -name '*.org' -exec emacs -nw --batch -l org --eval '(org-babel-tangle-file "{}")' \;
#+end_src

** Stow
'-n' for dry run

for a single application
#+begin_src shell
stow -v2 <name> -n
#+end_src

using entire list
#+begin_src shell
cat <list> | xargs -I {} stow -v2 -n {}
#+end_src
