#+title: AstroNvim
* Table of content :TOC:
- [[#astronvim][AstroNvim]]
  - [[#initlua][init.lua]]
  - [[#mappingslua][mappings.lua]]
  - [[#optionslua][options.lua]]
  - [[#plugins][plugins]]
  - [[#highlights][highlights]]
- [[#gnu-stow][Gnu stow]]
- [[#tagging][Tagging]]

* AstroNvim
:PROPERTIES:
:header-args: :tangle no :mkdirp yes
:END:

[[https://astronvim.com/][Official page]]

#+NAME: variables
| Variable | Value                         | Description         |
|----------+-------------------------------+---------------------|
| basedir  | .build/.config/nvim/lua/user/ | dotfile target path |

** init.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"init.lua"))
return {
  -- Configure AstroNvim updates
  updater = {
    remote = "origin",     -- remote to use
    channel = "stable",    -- "stable" or "nightly"
    version = "latest",    -- "latest", tag name, or regex search like "v1.*" to only do updates before v2 (STABLE ONLY)
    branch = "nightly",    -- branch name (NIGHTLY ONLY)
    commit = nil,          -- commit hash (NIGHTLY ONLY)
    pin_plugins = nil,     -- nil, true, false (nil will pin plugins on stable only)
    skip_prompts = false,  -- skip prompts about breaking changes
    show_changelog = true, -- show the changelog after performing an update
    auto_quit = false,     -- automatically quit the current session after a successful update
    remotes = {            -- easily add new remotes to track
      --   ["remote_name"] = "https://remote_url.come/repo.git", -- full remote url
      --   ["remote2"] = "github_user/repo", -- GitHub user/repo shortcut,
      --   ["remote3"] = "github_user", -- GitHub user assume AstroNvim fork
    },
  },

  -- Set colorscheme to use
  colorscheme = "catppuccin",

  -- Diagnostics configuration (for vim.diagnostics.config({...})) when diagnostics are on
  diagnostics = {
    virtual_text = true,
    underline = true,
  },

  lsp = {
    -- customize lsp formatting options
    formatting = {
      -- control auto formatting on save
      format_on_save = {
        enabled = true,     -- enable or disable format on save globally
        allow_filetypes = { -- enable format on save for specified filetypes only
          -- "go",
        },
        ignore_filetypes = { -- disable format on save for specified filetypes
          -- "python",
        },
      },
      disabled = { -- disable formatting capabilities for the listed language servers
        -- disable lua_ls formatting capability if you want to use StyLua to format your lua code
        -- "lua_ls",
      },
      timeout_ms = 1000, -- default format timeout
      -- filter = function(client) -- fully override the default formatting function
      --   return true
      -- end
    },
    -- enable servers that you already have installed without mason
    servers = {
      -- "pyright"
    },
  },

  -- Configure require("lazy").setup() options
  lazy = {
    defaults = { lazy = true },
    performance = {
      rtp = {
        -- customize default disabled vim plugins
        disabled_plugins = { "tohtml", "gzip", "matchit", "zipPlugin", "netrwPlugin", "tarPlugin" },
      },
    },
  },

  -- This function is run last and is a good place to configuring
  -- augroups/autocommands and custom filetypes also this just pure lua so
  -- anything that doesn't fit in the normal config locations above can go here
  polish = function()
    -- Set up custom filetypes
    -- vim.filetype.add {
    --   extension = {
    --     foo = "fooscript",
    --   },
    --   filename = {
    --     ["Foofile"] = "fooscript",
    --   },
    --   pattern = {
    --     ["~/%.config/foo/.*"] = "fooscript",
    --   },
    -- }
  end,
}
#+end_src

** mappings.lua

Mapping data with "desc" stored directly by vim.keymap.set().

Please use this mappings table to set keyboard mapping since this is the
lower level configuration and more robust one. (which-key will
automatically pick-up stored data by this setting.)

Have to look the official config source code at `.config/nvim/lua/astronvim/mappings.lua` in order to know
how to properly follow astronvim's rule to config plugin's mapping.

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"mappings.lua"))
local utils = require "astronvim.utils"

local maps = {
    -- first key is the mode
    n = {
        -- second key is the lefthand side of the map
        -- mappings seen under group name "Buffer"
        ["<leader>bn"] = {"<cmd>tabnew<cr>", desc = "New tab"},
        ["<leader>bD"] = {
            function()
                require("astronvim.utils.status").heirline.buffer_picker(
                    function(bufnr)
                        require("astronvim.utils.buffer").close(bufnr)
                    end
                )
            end,
            desc = "Pick to close"
        },
        -- tables with the `name` key will be registered with which-key if it's installed
        -- this is useful for naming menus
        ["<leader>b"] = {name = "Buffers"}
        -- quick save
        -- ["<C-s>"] = { ":w!<cr>", desc = "Save File" },  -- change description but the same command
    },
    i = {
        ["<C-a>"] = {"<C-o>^", desc = "To the beginning of line"},
        ["<C-e>"] = {"<C-o>$", desc = "To the end of line"},
        ["<C-f>"] = {"<right>", desc = "Move cursor forward"},
        ["<C-b>"] = {"<left>", desc = "Move cursor backward"},
        ["<M-f>"] = {"<Esc>ea", desc = "Move cursor forward to the end of word"},
        ["<M-b>"] = {"<S-Left>", desc = "Move cursor backward to the beginning of word"},
    },
    t = {},
    v = {},
    c = {
        ["<C-a>"] = {"<C-b>", desc = "To the beginning of line"},
        ["<C-f>"] = {"<right>", desc = "Move cursor forward"},
        ["<C-b>"] = {"<left>", desc = "Move cursor backward"},
        ["<M-f>"] = {"<S-Right>", desc = "Move cursor forward to the next word"},
        ["<M-b>"] = {"<S-Left>", desc = "Move cursor backward to the beginning of word"},
        ["<C-d>"] = {"<Del>", desc = "Delete char forward"},
    },
}

-- mappings for plugins
if utils.is_available "neogit" then
    maps.n["<leader>gg"] = {"<cmd>Neogit<cr>", desc = "Launch Magit for neovim"}
end

if utils.is_available "legendary.nvim" then
    maps.n["<leader>f/"] = {"<cmd>Legendary<cr>", desc = "Find by legendary"}
end

return maps
#+end_src

** options.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"options.lua"))
-- set vim options here (vim.<first_key>.<second_key> = value)
return {
  opt = {
    -- set to true or false etc.
    relativenumber = true, -- sets vim.opt.relativenumber
    number = true, -- sets vim.opt.number
    spell = false, -- sets vim.opt.spell
    signcolumn = "auto", -- sets vim.opt.signcolumn to auto
    wrap = false, -- sets vim.opt.wrap
  },
  g = {
    mapleader = " ", -- sets vim.g.mapleader
    autoformat_enabled = true, -- enable or disable auto formatting at start (lsp.formatting.format_on_save must be enabled)
    cmp_enabled = true, -- enable completion at start
    autopairs_enabled = true, -- enable autopairs at start
    diagnostics_mode = 3, -- set the visibility of diagnostics in the UI (0=off, 1=only show in status line, 2=virtual text off, 3=all on)
    icons_enabled = true, -- disable icons in the UI (disable if no nerd font is available, requires :PackerSync after changing)
    ui_notifications_enabled = true, -- disable notifications when toggling UI elements
  },
}
-- If you need more control, you can use the function()...end notation
-- return function(local_vim)
--   local_vim.opt.relativenumber = true
--   local_vim.g.mapleader = " "
--   local_vim.opt.whichwrap = vim.opt.whichwrap - { 'b', 's' } -- removing option from list
--   local_vim.opt.shortmess = vim.opt.shortmess + { I = true } -- add to option list
--
--   return local_vim
-- end
#+end_src
** plugins

*** cmp.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/cmp.lua"))
return {}
#+end_src

*** community.lua

Add the community repository of plugin specifications

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/community.lua"))
return {
    "AstroNvim/astrocommunity",
    -- example of imporing a plugin, comment out to use it or add your own
    -- available plugins can be found at https://github.com/AstroNvim/astrocommunity

    -- { import = "astrocommunity.colorscheme.catppuccin" },
    -- { import = "astrocommunity.completion.copilot-lua-cmp" },
    {import = "astrocommunity.motion.vim-matchup"},
    {import = "astrocommunity.motion.nvim-surround"},
    {import = "astrocommunity.pack.python"},
    {import = "astrocommunity.pack.bash"},
    {import = "astrocommunity.pack.json"},
    {import = "astrocommunity.pack.rust"},
    {import = "astrocommunity.pack.lua"},
    {import = "astrocommunity.pack.typescript"},
    {import = "astrocommunity.editing-support.neogen"},
    {import = "astrocommunity.project.nvim-spectre"}
}
#+end_src

*** core.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/core.lua"))
return {
  -- customize alpha options
  {
    "goolord/alpha-nvim",
    opts = function(_, opts)
      -- customize the dashboard header
      opts.section.header.val = {
        " █████  ███████ ████████ ██████   ██████",
        "██   ██ ██         ██    ██   ██ ██    ██",
        "███████ ███████    ██    ██████  ██    ██",
        "██   ██      ██    ██    ██   ██ ██    ██",
        "██   ██ ███████    ██    ██   ██  ██████",
        " ",
        "    ███    ██ ██    ██ ██ ███    ███",
        "    ████   ██ ██    ██ ██ ████  ████",
        "    ██ ██  ██ ██    ██ ██ ██ ████ ██",
        "    ██  ██ ██  ██  ██  ██ ██  ██  ██",
        "    ██   ████   ████   ██ ██      ██",
      }
      return opts
    end,
  },
  -- You can disable default plugins as follows:
  -- { "max397574/better-escape.nvim", enabled = false },
  --
  -- You can also easily customize additional setup of plugins that is outside of the plugin's setup call
  -- {
  --   "L3MON4D3/LuaSnip",
  --   config = function(plugin, opts)
  --     require "plugins.configs.luasnip"(plugin, opts) -- include the default astronvim config that calls the setup call
  --     -- add more custom luasnip configuration such as filetype extend or custom snippets
  --     local luasnip = require "luasnip"
  --     luasnip.filetype_extend("javascript", { "javascriptreact" })
  --   end,
  -- },
  -- {
  --   "windwp/nvim-autopairs",
  --   config = function(plugin, opts)
  --     require "plugins.configs.nvim-autopairs"(plugin, opts) -- include the default astronvim config that calls the setup call
  --     -- add more custom autopairs configuration such as custom rules
  --     local npairs = require "nvim-autopairs"
  --     local Rule = require "nvim-autopairs.rule"
  --     local cond = require "nvim-autopairs.conds"
  --     npairs.add_rules(
  --       {
  --         Rule("$", "$", { "tex", "latex" })
  --           -- don't add a pair if the next character is %
  --           :with_pair(cond.not_after_regex "%%")
  --           -- don't add a pair if  the previous character is xxx
  --           :with_pair(
  --             cond.not_before_regex("xxx", 3)
  --           )
  --           -- don't move right when repeat character
  --           :with_move(cond.none())
  --           -- don't delete if the next character is xx
  --           :with_del(cond.not_after_regex "xx")
  --           -- disable adding a newline when you press <cr>
  --           :with_cr(cond.none()),
  --       },
  --       -- disable for .vim files, but it work for another filetypes
  --       Rule("a", "a", "-vim")
  --     )
  --   end,
  -- },
  -- By adding to the which-key config and using our helper function you can add more which-key registered bindings
  -- {
  --   "folke/which-key.nvim",
  --   config = function(plugin, opts)
  --     require "plugins.configs.which-key"(plugin, opts) -- include the default astronvim config that calls the setup call
  --     -- Add bindings which show up as group name
  --     local wk = require "which-key"
  --     wk.register({
  --       b = { name = "Buffer" },
  --     }, { mode = "n", prefix = "<leader>" })
  --   end,
  -- },
}
#+end_src

*** mason.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/mason.lua"))
-- customize mason plugins
return {
  -- use mason-lspconfig to configure LSP installations
  {
    "williamboman/mason-lspconfig.nvim",
    -- overrides `require("mason-lspconfig").setup(...)`
    opts = function(_, opts)
      -- add more things to the ensure_installed table protecting against community packs modifying it
      opts.ensure_installed = require("astronvim.utils").list_insert_unique(opts.ensure_installed, {
        -- "lua_ls",
      })
    end,
  },
  -- use mason-null-ls to configure Formatters/Linter installation for null-ls sources
  {
    "jay-babu/mason-null-ls.nvim",
    -- overrides `require("mason-null-ls").setup(...)`
    opts = function(_, opts)
      -- add more things to the ensure_installed table protecting against community packs modifying it
      opts.ensure_installed = require("astronvim.utils").list_insert_unique(opts.ensure_installed, {
        -- "prettier",
        -- "stylua",
      })
    end,
  },
  {
    "jay-babu/mason-nvim-dap.nvim",
    -- overrides `require("mason-nvim-dap").setup(...)`
    opts = function(_, opts)
      -- add more things to the ensure_installed table protecting against community packs modifying it
      opts.ensure_installed = require("astronvim.utils").list_insert_unique(opts.ensure_installed, {
        -- "python",
      })
    end,
  },
}
#+end_src

*** neo-tree.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/neo-tree.lua"))
return {
  "nvim-neo-tree/neo-tree.nvim",
  opts = {
    filesystem = {
      follow_current_file = true,
      filtered_items = {
        visible = true,
        hide_dotfiles = false,
        hide_gitignored = true,
        hide_by_name = {
          ".DS_Store",
          ".git",
          ".github"
        }
      }
    }
  }
}
#+end_src

*** null-ls.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/null-ls.lua"))
return {
  "jose-elias-alvarez/null-ls.nvim",
  opts = function(_, config)
    -- config variable is the default configuration table for the setup function call
    -- local null_ls = require "null-ls"

    -- Check supported formatters and linters
    -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting
    -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics
    config.sources = {
      -- Set a formatter
      -- null_ls.builtins.formatting.stylua,
      -- null_ls.builtins.formatting.prettier,
    }
    return config -- return final config table
  end,
}
#+end_src

*** rust.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/rust.lua"))
return {
  {
    "rust-lang/rust.vim",
    ft = { "rust" },
    init = function() vim.g.rustfmt_autosave = 1 end,
  },
  {
    "simrat39/rust-tools.nvim",
    opts = {
      server = {
        on_attach = function(client, bufnr) client.server_capabilities.semanticTokensProvider = nil end,
      },
    },
  },
}
#+end_src

*** treesitter.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/treesitter.lua"))
return {
  "nvim-treesitter/nvim-treesitter",
  opts = function(_, opts)
    -- add more things to the ensure_installed table protecting against community packs modifying it
    opts.ensure_installed = require("astronvim.utils").list_insert_unique(opts.ensure_installed, {
      -- "lua"
    })
  end,
}
#+end_src

*** hop.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/hop.lua"))
return {
    "phaazon/hop.nvim",
    opts = {
        keys = "aoeuhtnsqjkmwvgcr"
    },
    init = function()
        local hop = require("hop")
        local directions = require("hop.hint").HintDirection
        local positions = require("hop.hint").HintPosition
        local jump_target = require("hop.jump_target")
        local wk = require("which-key")

        wk.register(
            {
                f = {function()
                        hop.hint_char1({current_line_only = true})
                    end, "Hop to char 👉 in line"},
                t = {function()
                        hop.hint_char1(
                            {direction = directions.AFTER_CURSOR, current_line_only = true, hint_offset = -1}
                        )
                    end, "Hop after char 👉 in line"},
                T = {function()
                        hop.hint_char1(
                            {direction = directions.BEFORE_CURSOR, current_line_only = true, hint_offset = 1}
                        )
                    end, "Hop before char 👉 in line"},
                s = {function()
                        hop.hint_char2({current_line_only = true})
                    end, "Hop 2 char in line"}
            },
            {mode = "n"}
        )

        wk.register(
            {
                s = {
                    name = "Hop select",
                    f = {function()
                            hop.hint_char1({current_line_only = true})
                        end, "Hop to char 👉 in line"},
                    t = {function()
                            hop.hint_char1(
                                {direction = directions.AFTER_CURSOR, current_line_only = true, hint_offset = -1}
                            )
                        end, "Hop after char 👉 in line"},
                    T = {function()
                            hop.hint_char1(
                                {direction = directions.BEFORE_CURSOR, current_line_only = true, hint_offset = 1}
                            )
                        end, "Hop before char 👉 in line"},
                    s = {function()
                            hop.hint_char2({current_line_only = true})
                        end, "Hop 2 char in line"}
                }
            },
            {mode = "v"}
        )

        wk.register(
            {
                s = {
                    name = "hop",
                    s = {function()
                            hop.hint_char2({multi_windows = true})
                        end, "Hop 2 char 🪟"},
                    ["*"] = {function()
                            hop.hint_patterns({multi_windows = true}, vim.fn.expand("<cword>"))
                        end, "Hop current word 🪟"},
                    ["%"] = {
                        function()
                            hop.hint_with(
                                jump_target.jump_targets_by_scanning_lines(
                                    jump_target.regex_by_case_searching("[(){}\\[\\]]", false, {})
                                ),
                                hop.opts
                            )
                        end,
                        "Hop ()[]{}"
                    },
                    ["<Space>"] = {function()
                            hop.hint_patterns({multi_windows = true})
                        end, "Hop pattern 🪟"}
                }
            },
            {
                prefix = "g",
                mode = "n"
            }
        )

        wk.register(
            {
                s = {
                    name = "hop",
                    s = {function()
                            hop.hint_char2({current_line_only = false})
                        end, "Hop 2 char 👉"},
                    ["*"] = {function()
                            hop.hint_patterns(nil, vim.fn.expand("<cword>"))
                        end, "Hop current word"},
                    ["%"] = {
                        function()
                            hop.hint_with(
                                jump_target.jump_targets_by_scanning_lines(
                                    jump_target.regex_by_case_searching("[(){}\\[\\]]", false, {})
                                ),
                                hop.opts
                            )
                        end,
                        "Hop ()[]{}"
                    },
                    ["<Space>"] = {hop.hint_patterns, "Hop pattern"}
                }
            },
            {
                prefix = "g",
                mode = "v"
            }
        )
    end
}
#+end_src
*** lspconfig.lua

including [[https://github.com/aca/emmet-ls][emmet-ls]]

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/lspconfig.lua"))
return {
  "neovim/nvim-lspconfig",
  init = function()
    local lspconfig = require("lspconfig")
    local configs = require("lspconfig/configs")
    local capabilities = vim.lsp.protocol.make_client_capabilities()

    capabilities.textDocument.completion.completionItem.snippetSupport = true
    lspconfig.emmet_ls.setup(
      {
        -- on_attach = on_attach,
        capabilities = capabilities,
        filetypes = {
          "css",
          "eruby",
          "html",
          "javascript",
          "javascriptreact",
          "less",
          "sass",
          "scss",
          "svelte",
          "pug",
          "typescriptreact",
          "vue"
        },
        init_options = {
          html = {
            options = {
              -- For possible options, see: https://github.com/emmetio/emmet/blob/master/src/config.ts#L79-L267
              ["bem.enabled"] = true
            }
          },
          js = {
            options = {
              ["markup.attributes"] = { class = "className" }
            }
          }
        }
      }
    )
  end
}
#+end_src
*** neogit.lua

magit for neovim

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/neogit.lua"))
return {
  "TimUntersberger/neogit",
  dependencies = { "nvim-lua/plenary.nvim" },
  cmd = { "Neogit" },
}
#+end_src
*** oil.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/oil.lua"))
return {
  "stevearc/oil.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons" },
  cmd = "Oil",
  config = function(_, opts)
    require("oil").setup(opts)
  end
}
#+end_src

*** legendary.lua

Command palette plugins

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/legendary.lua"))
return {
  "mrjones2014/legendary.nvim",
  opts = {
    commands = {
      {":Neogit", description="Magit for neovim"},
      {":Oil", description="file explorer: edit in a buffer"},
    }
  },
  cmd = { "Legendary" }
}
#+end_src

*** luasnip.lua

Add auto cancel all jump points when mode change back to normal mode, config taken from the [[https://github.com/L3MON4D3/LuaSnip/issues/258#issuecomment-1429989436][github issue]].

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/luasnip.lua"))
return {
  "L3MON4D3/LuaSnip",
  init = function()
    vim.api.nvim_create_autocmd('ModeChanged', {
      pattern = '*',
      callback = function()
        if ((vim.v.event.old_mode == 's' and vim.v.event.new_mode == 'n') or vim.v.event.old_mode == 'i')
            and require('luasnip').session.current_nodes[vim.api.nvim_get_current_buf()]
            and not require('luasnip').session.jump_active
        then
          require('luasnip').unlink_current()
        end
      end
    })
  end
}
#+end_src

*** user.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"plugins/user.lua"))
return {
  -- You can also add new plugins here as well:
  -- Add plugins, the lazy syntax
  -- "andweeb/presence.nvim",
  -- {
  --   "ray-x/lsp_signature.nvim",
  --   event = "BufRead",
  --   config = function()
  --     require("lsp_signature").setup()
  --   end,
  -- },
  { "nvim-treesitter/nvim-treesitter-context", event = "User AstroFile" },
  { "andymass/vim-matchup", enabled = false },
  { "vim-scripts/ReplaceWithRegister", event = "User AstroFile" },
  -- colorscheme
  { "Mofiqul/dracula.nvim", name = "dracula", keys = { "<leader>ft" } },
  { "catppuccin/nvim", name = "catppuccin", lazy = false },
}
#+end_src
** highlights
*** init.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"highlights/init.lua"))
return { -- this table overrides highlights in all themes
  -- Normal = { bg = "#000000" },
}
#+end_src

*** duskfox.lua

#+begin_src lua :tangle (org-sbe helper.org.resolve-path (path $"highlights/duskfox.lua"))
return { -- a table of overrides/changes to the duskfox theme
  Normal = { bg = "#000000" },
}
#+end_src

* Gnu stow
#+begin_src pattern :tangle .stow-local-ignore
#+end_src

Install dotfile
#+begin_src sh :results output
stow -v1 -t ~ .build
#+end_src

#+RESULTS:

Uninstall dotfile
#+begin_src sh :results output
stow -t ~ -D .build
#+end_src

#+RESULTS:

* Tagging
#+begin_src tag :tangle TAGS
linux
darwin
#+end_src
