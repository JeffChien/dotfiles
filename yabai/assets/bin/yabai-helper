#!/usr/bin/env python3
import argparse
import subprocess
import shlex
import sys
import json
from typing import TypedDict
from typing import List


class FrameType(TypedDict):
    x: float
    y: float
    w: float
    h: float


class DisplayType(TypedDict):
    id: int
    uudi: str
    index: int
    frame: FrameType
    spaces: List[int]


SpaceType = TypedDict(
    "SpaceType",
    {
        "id": int,
        "uudi": str,
        "index": int,
        "label": str,
        "type": str,
        "display": int,
        "windows": List[int],
        "first_window": int,
        "last-window": int,
        "has-focus": bool,
        "is-visible": bool,
        "is-native-fullscreen": bool,
    },
)


def query_displays() -> List[DisplayType]:
    return json.loads(subprocess.check_output(shlex.split("yabai -m query --displays")))


def query_current_space() -> SpaceType:
    return json.loads(
        subprocess.check_output(shlex.split("yabai -m query --spaces --space"))
    )


def focus(args):
    """Focus space or display cyclically

    Args:
        args : command line argument
            domain: space or display
            offset: decimal number
    """

    display_datas: List[DisplayType] = query_displays()
    display_datas.sort(key=lambda x: x['index'])
    cur_space: SpaceType = query_current_space()

    # the index in yabai is starting at 1
    if args.domain == "space":
        total_spaces = len(display_datas[cur_space["display"] - 1]["spaces"])
        first_space_idx = display_datas[cur_space["display"] - 1]["spaces"][0]
        final_space_idx = first_space_idx + ((cur_space["index"] - 1 + args.offset) % total_spaces)
        if final_space_idx != cur_space["index"]:
            subprocess.check_call(shlex.split(f'yabai -m space --focus {final_space_idx}'))

    elif args.domain == "display":
        final_display_idx = 1 + ((cur_space["display"] - 1 + args.offset) % len(display_datas))
        if final_display_idx != cur_space["display"]:
            subprocess.check_call(shlex.split(f'yabai -m display --focus {final_display_idx}'))

def main():
    parser = argparse.ArgumentParser(description="Helper for yabai")
    subparsers = parser.add_subparsers(title="subcommands")
    focus_parser = subparsers.add_parser("focus")
    focus_parser.add_argument("domain", choices=["space", "display"])
    focus_parser.add_argument("offset", default=1, type=int, help="offset direction")
    focus_parser.set_defaults(func=focus)
    args = parser.parse_args()

    try:
        args.func(args)
    except subprocess.CalledProcessError as e:
        print(e.stderr, file=sys.stderr)
        exit(e.returncode)

    exit(0)


if __name__ == "__main__":
    main()
