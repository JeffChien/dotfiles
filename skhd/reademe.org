#+title: Reademe
#+PROPERTY: header-args :tangle .config/skhd/skhdrc :mkdirp yes
#+STARTUP: content

* skhd
It's a powerful hotkey daemon for macOS

It allows me to implement different modes like vim or emac's which key, all it lacks is a decent popup gui to show the
key bindings.

[[https://github.com/koekeishiya/skhd][github]]
* skhdrc
** doc
#+begin_src conf :tangle no
#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# shift - x ; test
#
# from 'test' mode, activate mode 'default'
# test < shift - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < shift - return : open -na /Applications/Terminal.app

# application specific bindings
#
# shift - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# apple qwery key code, has to use the capital hex case.
# https://cloud.githubusercontent.com/assets/6175959/18551554/35137fc6-7b59-11e6-81a0-bef19ed5db5e.png
#+end_src
** confs
*** modes declaration
#+begin_src conf
:: default : spacebar -m config background_color 0xff202020 ; \
        spacebar -m config left_shell_command "echo ''"; \
        spacebar -m config left_shell off; \
        spacebar -m config center_shell_command "echo ''"; \
        spacebar -m config center_shell off; \

:: activate @: spacebar -m config center_shell on; \
        spacebar -m config center_shell_command "echo '[y]abai'"

# deprecated
:: yabai @: spacebar -m config left_shell on; \
        spacebar -m config left_shell_command "echo 'yabai'"; \
        spacebar -m config center_shell_command "echo '[hkjl] -> focus\t [shift - [hkjl]] -> swap\t [t] -> misc mode\t [s] -> space mode\t [m] -> monitor mode'"

:: yabai_window_misc @: spacebar -m config left_shell_command "echo 'yabai/window/misc'"; \
        spacebar -m config center_shell_command "echo 'shift - f, floating main window    [f]loat    [s]ticky'";

:: yabai_space @: spacebar -m config left_shell_command "echo 'yabai/space'"; \
        spacebar -m config center_shell_command "echo '[1-6,.] -> focus\t [shift - [1-6,.]] -> move window to space\t [b] -> bsp\t [f] -> float\t [c] -> rotate 90\t [-] -> horizontal mirror\t [|] -> vertical mirrow\t [m] -> monitor mode\t [backspace] -> yabai'"

:: yabai_monitor @: spacebar -m config left_shell_command "echo 'yabai/monitor'"; \
        spacebar -m config center_shell_command "echo '[1-3,.] focus\t [shift - [1-3,.]] -> move window to monitor\t [s] -> space mode\t [backspace] -> yabai'"
#+end_src

*** modes definition
#+begin_src conf
# mode switch
default < fn - 0x2C ; activate # fn - slash
activate, yabai < escape; default
yabai, yabai_window_misc < escape; default
yabai_space < escape; default
yabai_monitor < escape; default

# yabai
activate < y; yabai

yabai < h    : yabai -m window --focus west
yabai < j    : yabai -m window --focus south
yabai < k    : yabai -m window --focus north
yabai < l    : yabai -m window --focus east
yabai < shift - h    : yabai -m window --swap west
yabai < shift - j    : yabai -m window --swap south
yabai < shift - k    : yabai -m window --swap north
yabai < shift - l    : yabai -m window --swap east
# send 2x command keys to trigger alfred
# 0x2A is \
#yabai < shift - 0x2A    : yabai -m window --insert west; \
#        skhd -k 'escape'; sleep 0.25; skhd -k '0x37'; skhd -k '0x37'
## 0x1B is minus symbol
#yabai < 0x1B    : yabai -m window --insert south; \
#        skhd -k 'escape'; sleep 0.25; skhd -k '0x37'; skhd -k '0x37'

yabai < m ; yabai_monitor
yabai < s ; yabai_space
yabai < t ; yabai_window_misc
yabai < backspace    ; activate

# yabai / window / misc
yabai_window_misc < shift - f    : yabai -m window --toggle float; \
        yabai -m window --grid 40:40:1:1:38:38
# yabai_window_misc < shift - f    : yabai -m window --toggle zoom-fullscreen
yabai_window_misc < f    : yabai -m window --toggle float; \
        yabai -m window --grid 4:4:1:1:2:2
yabai_window_misc < s    : yabai -m window --toggle sticky; \
        yabai -m window --toggle topmost;

yabai_window_misc < backspace    ; yabai

# yabai / space
yabai_space < 1    : yabai -m space --focus 1
yabai_space < 2    : yabai -m space --focus 2
yabai_space < 3    : yabai -m space --focus 3
yabai_space < 4    : yabai -m space --focus 4
yabai_space < 5    : yabai -m space --focus 5
yabai_space < 6    : yabai -m space --focus 6
yabai_space < 0x2B    : yabai -m space --focus prev # key=,
yabai_space < 0x2F    : yabai -m space --focus next # key=.
yabai_space < shift - 1    : yabai -m window --space 1; yabai -m space --focus 1
yabai_space < shift - 2    : yabai -m window --space 2; yabai -m space --focus 2
yabai_space < shift - 3    : yabai -m window --space 3; yabai -m space --focus 3
yabai_space < shift - 4    : yabai -m window --space 4; yabai -m space --focus 4
yabai_space < shift - 5    : yabai -m window --space 5; yabai -m space --focus 5
yabai_space < shift - 6    : yabai -m window --space 6; yabai -m space --focus 6
yabai_space < shift - 0x2B    : yabai -m window --space prev; yabai -m space --focus prev # key=,
yabai_space < shift - 0x2F    : yabai -m window --space next; yabai -m space --focus next # key=.
yabai_space < c    : yabai -m space --rotate 90
yabai_space < b    : yabai -m space --layout bsp
yabai_space < f    : yabai -m space --layout float
yabai_space < 0x1B    : yabai -m space --mirror x-axis
yabai_space < shift - 0x2A    : yabai -m space --mirror y-axis
yabai_space < m    ; yabai_monitor
yabai_space < backspace    ; yabai

# yabai / monitor
yabai_monitor < 1    : yabai -m display --focus 1
yabai_monitor < 2    : yabai -m display --focus 2
yabai_monitor < 3    : yabai -m display --focus 3
yabai_monitor < 0x2B    : yabai -m display --focus prev # key=,
yabai_monitor < 0x2F    : yabai -m display --focus next # key=.
yabai_monitor < shift - 1    : yabai -m window --display 1; yabai -m display --focus 1
yabai_monitor < shift - 2    : yabai -m window --display 2; yabai -m display --focus 2
yabai_monitor < shift - 3    : yabai -m window --display 3; yabai -m display --focus 3
yabai_monitor < shift - 0x2B    : yabai -m window --display prev; yabai -m display --focus prev # key=,
yabai_monitor < shift - 0x2F    : yabai -m window --display next; yabai -m display --focus next # key=.
yabai_monitor < s    ; yabai_space
yabai_monitor < backspace    ; yabai

## defalut mode
default < f2  : [[ `im-select` = "com.apple.keylayout.Dvorak" ]] && im-select im.rime.inputmethod.Squirrel.Rime || im-select com.apple.keylayout.Dvorak
#+end_src

* Gnu stow
#+begin_src pattern :tangle .stow-local-ignore
#+end_src

* Tagging
#+begin_src tag :tangle TAGS
darwin
#+end_src
