#+title: Reademe
#+STARTUP: content

* skhd
It's a powerful hotkey daemon for macOS

It allows me to implement different modes like vim or emac's which key, all it lacks is a decent popup gui to show the
key bindings.

[[https://github.com/koekeishiya/skhd][github]]

| Keybinding | Description                                            |
|------------+--------------------------------------------------------|
| fn-w       | Active yabai mode                                      |
| f2         | Switch keyboard input between Dvorak and Chinese input |

* skhdrc
:PROPERTIES:
:header-args: :tangle (org-sbe helper.org.resolve-path (path $"skhdrc")) :mkdirp yes
:END:

#+NAME: variables
| Variable | Value                | Description           |
|----------+----------------------+-----------------------|
| basedir  | .build/.config/skhd/ | dotfile target folder |

** doc

| key | hex code |
|-----+----------|
| -   |     0x1B |
| \   |     0x2A |
| ,   |     0x2B |
| /   |     0x2C |
| .   |     0x2F |

#+begin_src conf :tangle no
#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# shift - x ; test
#
# from 'test' mode, activate mode 'default'
# test < shift - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < shift - return : open -na /Applications/Terminal.app

# application specific bindings
#
# shift - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# apple qwery key code, has to use the capital hex case.
# https://cloud.githubusercontent.com/assets/6175959/18551554/35137fc6-7b59-11e6-81a0-bef19ed5db5e.png
#+end_src
** confs
*** modes declaration
#+begin_src conf
:: default : \
        spacebar -m config background_color 0xff202020 ; \
        spacebar -m config left_shell_command "echo ''"; \
        spacebar -m config left_shell on; \
        spacebar -m config center_shell_command "echo ''"; \
        spacebar -m config center_shell on; \
#+end_src

*** yabai

- TODOs [0/1]
  - [ ] Update spacebar information.

**** modes definition
#+begin_src conf
:: yabai @: \
        spacebar -m config left_shell_command "echo 'yabai'"; \
        spacebar -m config center_shell_command "echo '[hkjl] -> focus\t [shift - [hkjl]] -> swap\t [t] -> misc mode\t [s] -> space mode\t [m] -> monitor mode'"

:: yabai_window_misc @: \
        spacebar -m config left_shell_command "echo 'yabai/window/misc'"; \
        spacebar -m config center_shell_command "echo 'shift - f, floating main window    [f]loat    [s]ticky'";

:: yabai_space @: \
        spacebar -m config left_shell_command "echo 'yabai/space'"; \
        spacebar -m config center_shell_command "echo '[1-6,.] -> focus\t [shift - [1-6,.]] -> move window to space\t [b] -> bsp\t [f] -> float\t [c] -> rotate 90\t [-] -> horizontal mirror\t [|] -> vertical mirrow\t [m] -> monitor mode\t [backspace] -> yabai'"

:: yabai_monitor @: \
        spacebar -m config left_shell_command "echo 'yabai/monitor'"; \
        spacebar -m config center_shell_command "echo '[1-3,.] focus\t [shift - [1-3,.]] -> move window to monitor\t [s] -> space mode\t [backspace] -> yabai'"

# mode switch
default < fn - w ; yabai # fn - w
yabai, yabai_window_misc < escape; default
yabai_space < escape; default
yabai_monitor < escape; default
#+end_src

**** Window mode

This mode is the default mode that control window focus and swapping.

| Keybinding | Description                         |
|------------+-------------------------------------|
| [hjkl]     | Focus window in vim style direction |
| S-[hjkl]   | Swap window in vim style direction  |
| m          | Switch to monitor(screen) mode      |
| s          | Switch to space mode                |
| o          | Switch to window options mode       |
| <esc>      | Exit                                |

#+begin_src conf
# yabai / window

## mode switch
yabai < m ; yabai_monitor
yabai < s ; yabai_space
yabai < o ; yabai_window_misc

## keybindings
yabai < h    : yabai -m window --focus west
yabai < j    : yabai -m window --focus south
yabai < k    : yabai -m window --focus north
yabai < l    : yabai -m window --focus east
yabai < shift - h    : yabai -m window --swap west
yabai < shift - j    : yabai -m window --swap south
yabai < shift - k    : yabai -m window --swap north
yabai < shift - l    : yabai -m window --swap east
#+end_src

**** Window options mode

| Keybinding  | Description                                                  |
|-------------+--------------------------------------------------------------|
| m           | Toggle fullscreen                                            |
| f           | Toggle float(small)                                          |
| S-f         | Toggle float(large)                                          |
| s           | Toggle sticky and topmost, making it to appear across spaces |
| <backspace> | Switch to window mode                                   |
| <esc>       | Exit                                                         |

#+begin_src conf
# yabai / window / misc

## mode switch
yabai_window_misc < backspace    ; yabai


## keybindings
yabai_window_misc < m : \
        yabai -m window --toggle zoom-fullscreen

yabai_window_misc < f : \
        yabai -m window --toggle float; \
        yabai -m window --grid 4:4:1:1:2:2

yabai_window_misc < shift - f : \
        yabai -m window --toggle float; \
        yabai -m window --grid 40:40:1:1:38:38

yabai_window_misc < s : \
        yabai -m window --toggle sticky; \
        yabai -m window --toggle topmost;
#+end_src

**** Space mode

| Keybinding   | Description                                               |
|--------------+-----------------------------------------------------------|
| h            | Focus previous space                                      |
| l            | Focus next space                                          |
| S-h          | Move window to previous space and follow                  |
| S-l          | Move window to next space and follow                      |
| C-S-h        | Move window to previous space and stay                    |
| C-S-l        | Move window to next space and stay                        |
| [123456]     | Focus to space #                                          |
| S-[123456]   | Move window to space # and follow                         |
| C-S-[123456] | Move window to space and stay                             |
| c            | Rotate 90 degree clockwise                                |
| b            | Change layout to bsp                                      |
| f            | Change layout to float, yabai will not manage any windows |
| -            | Horizontal mirror (x-axis)                                |
| S-\          | Vertical mirror (y-axis)                                  |
| m            | Switch to monitor mode                                    |
| <backspace>  | Switch to window mode                                     |
| <esc>        | Exit                                                      |

#+begin_src conf
# yabai / space

## mode switch
yabai_space < m    ; yabai_monitor
yabai_space < backspace    ; yabai

## keybindings
yabai_space < h : ~/bin/yabai-helper focus "space/@/-1"
yabai_space < l : ~/bin/yabai-helper focus "space/@/1"

## TODO, allowing cycle through spaces
yabai_space < shift - h    : ~/bin/yabai-helper throw "window/@" "space/@/-1" --follow
yabai_space < shift - l    : ~/bin/yabai-helper throw "window/@" "space/@/1" --follow
yabai_space < ctrl + shift - h    : ~/bin/yabai-helper throw "window/@" "space/@/-1"
yabai_space < ctrl + shift - l    : ~/bin/yabai-helper throw "window/@" "space/@/1"

yabai_space < 1    : yabai -m space --focus 1
yabai_space < 2    : yabai -m space --focus 2
yabai_space < 3    : yabai -m space --focus 3
yabai_space < 4    : yabai -m space --focus 4
yabai_space < 5    : yabai -m space --focus 5
yabai_space < 6    : yabai -m space --focus 6
yabai_space < shift - 1    : yabai -m window --space 1; yabai -m space --focus 1
yabai_space < shift - 2    : yabai -m window --space 2; yabai -m space --focus 2
yabai_space < shift - 3    : yabai -m window --space 3; yabai -m space --focus 3
yabai_space < shift - 4    : yabai -m window --space 4; yabai -m space --focus 4
yabai_space < shift - 5    : yabai -m window --space 5; yabai -m space --focus 5
yabai_space < shift - 6    : yabai -m window --space 6; yabai -m space --focus 6
yabai_space < ctrl + shift - 1    : yabai -m window --space 1
yabai_space < ctrl + shift - 2    : yabai -m window --space 2
yabai_space < ctrl + shift - 3    : yabai -m window --space 3
yabai_space < ctrl + shift - 4    : yabai -m window --space 4
yabai_space < ctrl + shift - 5    : yabai -m window --space 5
yabai_space < ctrl + shift - 6    : yabai -m window --space 6
yabai_space < c    : yabai -m space --rotate 90
yabai_space < b    : yabai -m space --layout bsp
yabai_space < f    : yabai -m space --layout float
yabai_space < 0x1B    : yabai -m space --mirror x-axis # key=-
yabai_space < shift - 0x2A    : yabai -m space --mirror y-axis #key=|

#+end_src

**** Monitor mode

| Keybinding | Description                                |
|------------+--------------------------------------------|
| h          | Focus previous monitor                     |
| l          | Focus next monitor                         |
| S-h        | Move window to previous monitor and follow |
| S-l        | Move window to next monitor and follow     |
| C-S-h      | Move window to previous monitor and stay   |
| C-S-l      | Move window to next monitor and stay       |
| [123]      | Focus monitor #                            |
| S-[123]    | Move window to monitor # and follow        |
| C-S-[123]  | Move window to monitor # and stay          |
|            |                                            |

#+begin_src conf
# yabai / monitor
## mode switch
yabai_monitor < s    ; yabai_space
yabai_monitor < backspace    ; yabai

## keybindings
yabai_monitor < h : ~/bin/yabai-helper focus "display/@/-1"
yabai_monitor < l : ~/bin/yabai-helper focus "display/@/1"

yabai_monitor < shift - h : ~/bin/yabai-helper throw "window/@" "display/@/-1" --follow
yabai_monitor < shift - l : ~/bin/yabai-helper throw "window/@" "display/@/1" --follow
yabai_monitor < ctrl+shift - h : ~/bin/yabai-helper throw "window/@" "display/@/-1"
yabai_monitor < ctrl+shift - l : ~/bin/yabai-helper throw "window/@" "display/@/1"
yabai_monitor < 1 : yabai -m display --focus 1
yabai_monitor < 2 : yabai -m display --focus 2
yabai_monitor < 3 : yabai -m display --focus 3
yabai_monitor < shift - 1 : \
    yabai -m window --display 1; yabai -m display --focus 1
yabai_monitor < shift - 2 : \
    yabai -m window --display 2; yabai -m display --focus 2
yabai_monitor < shift - 3 : \
    yabai -m window --display 3; yabai -m display --focus 3
yabai_monitor < ctrl+shift - 1 : yabai -m window --display 1
yabai_monitor < ctrl+shift - 2 : yabai -m window --display 2
yabai_monitor < ctrl+shift - 3 : yabai -m window --display 3
#+end_src
**** Others

layout backup/restore snippet from [[https://github.com/koekeishiya/yabai/issues/259#issuecomment-865056633][github discuss]]

#+begin_src conf
## defalut mode
default < fn - 0 : \
    osascript -e 'display dialog "Save window layout to /tmp/yabai-layout-backup.sh ?" with title "yabai backup"' \
    && yabai -m query --windows | jq -re '.[] | select(.minimized != 1) | "yabai -m window \(.id) --display \(.display) --space \(.space) --move abs:\(.frame.x):\(.frame.y) --resize abs:\(.frame.w):\(.frame.h)"' >! /tmp/yabai-layout-backup.sh \
    && osascript -e 'display notification "done" with title "yabai backup"'

default < fn + shift - 0 : \
    osascript -e 'display dialog "Restore window layout from /tmp/yabai-layout-backup.sh ?" with title "yabai restore"' \
    && bash /tmp/yabai-layout-backup.sh \
    && (osascript -e 'display notification "done" with title "yabai restore"'; rm /tmp/yabai-layout-backup.sh)
#+end_src
*** Others

#+begin_src conf
## defalut mode
default < f2  : [[ `im-select` = "com.apple.keylayout.Dvorak" ]] && im-select im.rime.inputmethod.Squirrel.Rime || im-select com.apple.keylayout.Dvorak
default < f12 : ~/bin/yabai-helper guake --topmost --grid "20:20:0:15:20:5" '^Guake'
#+end_src

* Gnu stow
#+begin_src pattern :tangle .stow-local-ignore
#+end_src

Install dotfile
#+begin_src sh :results output
stow -v1 -t ~ .build
#+end_src

#+RESULTS:

Uninstall dotfile
#+begin_src sh :results output
stow -t ~ -D .build
#+end_src

* Tagging
#+begin_src tag :tangle TAGS
darwin
#+end_src
